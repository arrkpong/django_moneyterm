"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
#project\settings.py
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# คีย์ลับที่ใช้สำหรับการเข้ารหัสข้อมูลต่าง ๆ ในการทำงานของ Django ในโหมดการพัฒนา ควรเก็บเป็นความลับและไม่ควรเผยแพร่ในสภาพแวดล้อมการทำงานจริง
SECRET_KEY = 'django-insecure-g@mepit8ee9cec3^e19x$h&6dt@3u1lit**1b#m+f&7i=3pd+m'

# กำหนดให้ Django ทำงานในโหมด Debug ซึ่งช่วยในการแสดงข้อผิดพลาดและข้อมูลเพิ่มเติมในการพัฒนาแอปพลิเคชัน
DEBUG = True

# รายการโฮสต์ที่อนุญาตให้เข้าถึงเว็บไซต์หรือแอปพลิเคชัน Django นี้ ในกรณีนี้กำหนดให้ทุกๆ โฮสต์สามารถเข้าถึงได้
ALLOWED_HOSTS = ['*']

# ตั้งค่าอายุของ session cookie เป็น 1 ชั่วโมง (หน่วยเป็นวินาที)
SESSION_COOKIE_AGE = 60 * 60

# ไม่ให้ session cookie หมดอายุเมื่อปิดเบราว์เซอร์
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# บันทึก session ทุกครั้งที่มี request เข้ามา
SESSION_SAVE_EVERY_REQUEST = True

# ไม่กำหนด domain สำหรับ session cookie
SESSION_COOKIE_DOMAIN = None

# ตั้งค่า Secure สำหรับ session cookie เพื่อให้มีการส่งผ่านแบบเข้ารหัส HTTPS เท่านั้น
SESSION_COOKIE_SECURE = True

# ตั้งค่า SameSite สำหรับ session cookie เป็น 'Lax' เพื่อให้มีการส่งผ่าน cookie ได้เฉพาะในกรณีที่มีการเรียก URL จากเว็บไซต์ภายนอก
SESSION_COOKIE_SAMESITE = 'Lax'

# ตั้งค่า Secure สำหรับ CSRF cookie เพื่อให้มีการส่งผ่านแบบเข้ารหัส HTTPS เท่านั้น
CSRF_COOKIE_SECURE = True

# ตั้งค่า SameSite สำหรับ CSRF cookie เป็น 'Lax' เพื่อให้มีการส่งผ่าน cookie ได้เฉพาะในกรณีที่มีการเรียก URL จากเว็บไซต์ภายนอก
CSRF_COOKIE_SAMESITE = 'Lax'

# ตั้งค่า CSRF cookie เป็น HTTPOnly เพื่อป้องกันการโจมตี XSS
CSRF_COOKIE_HTTPONLY = True

# กำหนดให้ไม่อนุญาตการโหลดเนื้อหาใน <frame> หรือ <iframe>
X_FRAME_OPTIONS = 'DENY'

# ตั้งค่า X-Content-Type-Options เป็น nosniff
X_CONTENT_TYPE_OPTIONS = 'nosniff'

# อนุญาตให้การร้องขอที่มีการใช้งานรายละเอียดของรายการประจำตัว (credentials) ในการเรียกข้อมูลจากโดเมนอื่น
CORS_ALLOW_CREDENTIALS = True

# กำหนดให้เปิดใช้งานการเปลี่ยนเส้นทางเป็น HTTPS อัตโนมัติ
#SECURE_SSL_REDIRECT = True

# ตั้งค่าเพื่อป้องกันการโจมตี MIME sniffing
SECURE_CONTENT_TYPE_NOSNIFF = True

# กำหนดให้เปิดใช้งานตัวกรอง XSS ของเบราว์เซอร์
SECURE_BROWSER_XSS_FILTER = True

# ตั้งค่านโยบาย Referrer ที่เป็น 'same-origin' เพื่อให้เฉพาะ Referrer จาก Origin เดียวกันเท่านั้นที่จะส่งไปยังเซิร์ฟเวอร์
SECURE_REFERRER_POLICY = 'same-origin'

# ตั้งค่าให้เบราว์เซอร์ไม่ทำการสเนิฟเนื้อหา (sniffing) ประเภทของเนื้อหา
SECURE_CONTENT_TYPE_NOSNIFF = True

# ตั้งค่าการใช้งาน HTTP Strict Transport Security (HSTS) เป็นเวลาหนึ่งปี (31536000 วินาที)
SECURE_HSTS_SECONDS = 31536000

# รวมการใช้งาน HSTS ใน subdomains ทั้งหมดของเว็บไซต์
SECURE_HSTS_INCLUDE_SUBDOMAINS = True

# ตั้งค่าใช้งานการโหลดล่วงหน้าของ HSTS
SECURE_HSTS_PRELOAD = True

# กำหนดหัว HTTP header ที่ใช้เพื่อระบุการใช้งาน SSL โดยโปรกลาง
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# รายการ URL ที่ไม่ต้องการให้มีการเปลี่ยนเส้นทางให้เป็น HTTPS อัตโนมัติ
SECURE_REDIRECT_EXEMPT = [
    '/insecure-url/',  # ยกเว้น URL ที่เป็น /insecure-url/
    '/another-insecure-url/',  # ยกเว้น URL ที่เป็น /another-insecure-url/
]

# ตั้งค่า Content Security Policy (CSP) เพื่อควบคุมแหล่งที่มาของเนื้อหาในหน้าเว็บ
SECURE_CONTENT_SECURITY_POLICY = {
    'default-src': ["'self'"],  # กำหนดให้เนื้อหาโหลดมาจากโดเมนเว็บไซต์นี้เท่านั้น
    'frame-src': ["'self'", "https://js.stripe.com"],  # กำหนดให้อนุญาตการโหลด frame จากโดเมนต่าง ๆ เช่นเดียวกับโดเมนของ Stripe
    'script-src': ["'self'", "'unsafe-inline'", "'unsafe-eval'", "https://cdn.jsdelivr.net", "https://js.stripe.com"],  # อนุญาตให้โหลดสคริปต์จากโดเมนต่าง ๆ เช่นเดียวกับสคริปต์จาก Stripe
    'style-src': ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net", "fonts.googleapis.com"],  # อนุญาตให้โหลดสไตล์จากโดเมนต่าง ๆ เช่นเดียวกับสไตล์จาก Google Fonts
    'font-src': ["'self'", "https://cdn.jsdelivr.net", "fonts.gstatic.com"],  # อนุญาตให้โหลดแบบอักษรจากโดเมนต่าง ๆ เช่นเดียวกับอักษรจาก Google Fonts
    'img-src': ["'self'", 'data:', "https://cdn.jsdelivr.net"],  # อนุญาตให้โหลดรูปภาพจากโดเมนต่าง ๆ เช่นเดียวกับรูปภาพจาก CDN
    'connect-src': ["'self'"],  # กำหนดให้สามารถเชื่อมต่อกับโดเมนเว็บไซต์นี้เท่านั้น
}

# ตั้งค่า Permissions Policy เพื่อควบคุมการใช้งานทรัพยากรของผู้ใช้บนเว็บไซต์
SECURE_PERMISSIONS_POLICY = {
    "geolocation": "self",        # อนุญาตให้เข้าถึงตำแหน่งที่ตั้งของผู้ใช้ได้เฉพาะจากโดเมนเดียวกัน
    "camera": "*",                # ปิดการใช้งานกล้อง
    "microphone": "*",            # ปิดการใช้งานไมโครโฟน
    "midi": "*",                  # ปิดการใช้งาน MIDI
    "sync-xhr": "self",           # อนุญาตการใช้งาน synchronous XMLHttpRequest เฉพาะจากโดเมนเดียวกัน
    "usb": "*",                   # ปิดการใช้งาน USB
    "fullscreen": "self",         # อนุญาตการใช้งานโหมดเต็มหน้าจอเฉพาะจากโดเมนเดียวกัน
    "payment": "self"             # อนุญาตการใช้งานการชำระเงินเฉพาะจากโดเมนเดียวกัน
}


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'product_app',
    'user_app',
    'cart_app',
    'orders_app',
    'support_app',
    'payments.apps.PaymentsConfig',
    
]

# Middleware Configuration
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # เพิ่มชั้น SecurityMiddleware เพื่อป้องกันที่มาจากการโจมตีต่างๆ
    'django.contrib.sessions.middleware.SessionMiddleware',  # Middleware สำหรับการจัดการ Session ของผู้ใช้
    'django.middleware.common.CommonMiddleware',  # Middleware ทั่วไปที่ใช้ในการประมวลผล Request
    'django.middleware.csrf.CsrfViewMiddleware',  # Middleware สำหรับการป้องกัน CSRF attacks
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Middleware สำหรับการจัดการการตรวจสอบและการรับรองตัวตนของผู้ใช้
    'django.contrib.messages.middleware.MessageMiddleware',  # Middleware สำหรับการจัดการข้อความที่จะแสดงผลในระหว่าง Request
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Middleware สำหรับการป้องกัน Clickjacking attacks
    'django.middleware.gzip.GZipMiddleware',  # Middleware สำหรับการบีบอัด (Compression) ข้อมูลที่ส่งกลับไปยังผู้ใช้
    #'django.middleware.deflate.DeflateMiddleware', # Middleware สำหรับการบีบอัด (Compression) ข้อมูลที่ส่งกลับไปยังผู้ใช้
    #'django.middleware.brotli.BrotliMiddleware', # Middleware สำหรับการบีบอัด (Compression) ข้อมูลที่ส่งกลับไปยังผู้ใช้
    #'django.middleware.cache.UpdateCacheMiddleware',  # Middleware สำหรับการอัปเดตแคชของหน้า
    #'django.middleware.cache.FetchFromCacheMiddleware',  # Middleware สำหรับการดึงข้อมูลจากแคชของหน้า
    #'django.middleware.cache.CacheMiddleware',  # Middleware สำหรับการใช้งานแคชของหน้า
]
"""
# ตั้งค่าการใช้งานแคชหน้าเพจ
CACHE_MIDDLEWARE_ALIAS = 'default'  # ใช้ค่าการตั้งค่าแคชเริ่มต้น
CACHE_MIDDLEWARE_SECONDS = 60 * 15  # แคชหน้าเพจเป็นเวลา 15 นาที
CACHE_MIDDLEWARE_KEY_PREFIX = 'myproject_cache'  # คำนำหน้าคีย์ของแคชสำหรับโปรเจกต์
"""

# ตั้งค่าการใช้งานแคชฐานข้อมูล
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',  # ระบุ backend ของ cache เป็น PyMemcacheCache
        'LOCATION': '127.0.0.1:11211',  # ระบุที่อยู่ของ Memcached server ที่เราต้องการใช้งาน
        'TIMEOUT': 3600,  # ตั้งค่าให้แคชหมดอายุหลังจาก 1 ชั่วโมง
        'OPTIONS': {
            'MAX_ENTRIES': 1000,  # กำหนดให้แคชมีสูงสุด 1000 รายการ
        },
        'KEY_PREFIX': 'myapp_cache',  # คำนำหน้าคีย์แคชเป็น 'myapp_cache'
        'VERSION': 1,  # เวอร์ชันแรกของแคช
    }
}


ROOT_URLCONF = 'project.urls'  # ระบุชื่อ URLconf หลักของโปรเจกต์ Django เพื่อบอก Django ว่าจะไปหา URLs ที่ไฟล์ไหน

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # ใช้ Django template engine ในการจัดการ templates
        'DIRS': [BASE_DIR / 'templates'],  # ระบุโฟลเดอร์ที่เก็บ templates ของโปรเจกต์
        'APP_DIRS': True,  # เปิดใช้งานการค้นหา templates ในแอปพลิเคชันที่ติดตั้ง
        'OPTIONS': {
            'context_processors': [  # กำหนด context processors ที่ใช้ในการสร้าง context สำหรับ templates
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart_app.context_processors.cart_quantity',  # เพิ่ม context processor ที่เราสร้างเพื่อใช้ในการนับจำนวนสินค้าในตะกร้า
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'  # ระบุ WSGI application สำหรับการทำงานของเว็บแอปพลิเคชัน


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # ใช้เครื่องมือ SQLite ในการจัดการฐานข้อมูล
        'NAME': BASE_DIR / 'db.sqlite3',  # ระบุชื่อไฟล์ฐานข้อมูล SQLite ที่จะถูกสร้างขึ้นในโฟลเดอร์หลักของโปรเจกต์
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        # Validator นี้ใช้ตรวจสอบความคล้ายกันระหว่างรหัสผ่านกับ attributes อื่น ๆ ของผู้ใช้
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        # Validator นี้ใช้ตรวจสอบความยาวขั้นต่ำของรหัสผ่าน
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        # Validator นี้ใช้ตรวจสอบว่ารหัสผ่านไม่เป็นรหัสผ่านทั่วไปที่ใช้กันแพร่หลาย
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        # Validator นี้ใช้ตรวจสอบว่ารหัสผ่านมีตัวเลขอย่างน้อยหนึ่งตัว
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# LANGUAGE_CODE กำหนดรหัสภาษาของแอปพลิเคชันเริ่มต้น
LANGUAGE_CODE = 'en-us'

# TIME_ZONE กำหนดเขตเวลาของแอปพลิเคชัน
TIME_ZONE = 'Asia/Bangkok'

# USE_I18N กำหนดว่าจะแสดงผลข้อความตามการแปลภาษา (Internationalization) หรือไม่
USE_I18N = True

# USE_L10N กำหนดว่าจะใช้การแสดงผลตามภูมิภาค (Localization) เช่น รูปแบบวันที่ เวลา และตัวเลข หรือไม่
USE_L10N = True

# USE_TZ กำหนดว่าจะใช้การจัดการเขตเวลา (Time Zone) หรือไม่
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# STATIC_URL กำหนด URL สำหรับการเข้าถึงไฟล์แบบสถิติ
STATIC_URL = '/static/'

# STATICFILES_DIRS ระบุโฟลเดอร์ที่จะใช้เก็บไฟล์แบบสถิติ (CSS, JavaScript, Images)
STATICFILES_DIRS = [
    BASE_DIR / "static",  # เช่น BASE_DIR / "static" หมายถึงโฟลเดอร์ static ภายในโปรเจกต์
]

# STATIC_ROOT ระบุโฟลเดอร์เพื่อเก็บไฟล์แบบสถิติหลังจากที่จัดการแล้ว (สำหรับการนำออกไปยัง production)
STATIC_ROOT = BASE_DIR / "staticfiles"

# MEDIA_URL กำหนด URL สำหรับการเข้าถึงไฟล์มีเดีย (เช่น รูปภาพ, ไฟล์วิดีโอ)
MEDIA_URL = '/media/'

# MEDIA_ROOT ระบุโฟลเดอร์ที่ใช้เก็บไฟล์มีเดีย (เช่น รูปภาพ, ไฟล์วิดีโอ)
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# EMAIL_BACKEND กำหนด Backend ของอีเมล์ที่ใช้
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# EMAIL_HOST กำหนด SMTP Server ของ Gmail
EMAIL_HOST = 'smtp.gmail.com'

# EMAIL_PORT กำหนดพอร์ตของ SMTP Server (Gmail)
EMAIL_PORT = 587

# EMAIL_USE_TLS กำหนดให้ใช้ TLS (Transport Layer Security) สำหรับการเชื่อมต่อ
EMAIL_USE_TLS = True

# EMAIL_HOST_USER กำหนดชื่อผู้ใช้ของบัญชี Gmail ที่ใช้สำหรับส่งอีเมล์
EMAIL_HOST_USER = ''

# EMAIL_HOST_PASSWORD กำหนดรหัสผ่านของบัญชี Gmail
EMAIL_HOST_PASSWORD = ''

# Stripe API Production Keys
# https://dashboard.stripe.com/apikeys

# คีย์ที่ใช้ในการส่งข้อมูลไปยัง Stripe ในฝั่งของเว็บไซต์
#STRIPE_PUBLISHABLE_KEY = ''

# คีย์ที่ใช้ในการติดต่อกับ Stripe API ที่ส่งข้อมูลมา
#STRIPE_SECRET_KEY = ''

# คีย์จุดปลายทางที่ใช้ในการยืนยัน Webhook events ที่มาจาก Stripe
#STRIPE_ENDPOINT_SECRET = ''


# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'WARNING',  # ระดับของการบันทึก LOG ที่จะเก็บ (DEBUG, INFO, WARNING, ERROR, CRITICAL)
            'class': 'logging.FileHandler',  # ประเภทของ Handler ที่ใช้ในการบันทึกไฟล์
            'filename': 'debug/debug.log',  # ชื่อไฟล์ที่จะเก็บ LOG
            'encoding': 'utf-8',  # ระบุการเข้ารหัสเป็น UTF-8
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],  # ระบุ Handler ที่ใช้ในการบันทึก LOG สำหรับ 'django' ไปยังไฟล์ที่กำหนด
            'level': 'DEBUG',  # ระดับของการบันทึก LOG สำหรับ Logger 'django'
            'propagate': True,
        },
    },
}
